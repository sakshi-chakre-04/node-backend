<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Details</title>
    <link rel="stylesheet" href="path/to/your/styles.css" />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f4f4f4;
      }

      /* Toast styles for delete operation */
      .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4caf50;
        color: white;
        padding: 15px 25px;
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        display: none;
        animation: slideIn 0.5s ease-out;
      }

      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: white;
        padding: 10px 20px;
        position: relative;
      }

      h1 {
        color: #4a90e2;
        margin: 0;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
      }

      .button-container {
        display: flex;
        gap: 10px;
      }

      .search-container {
        display: flex;
        margin-left: 600px;
      }

      #searchInput {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-right: 5px;
        width: 300px;
      }

      #searchButton {
        background: #4a90e2;
        color: white;
        border: none;
        padding: 8px;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
      }

      button {
        background: #4a90e2;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      th,
      td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
      }
      th {
        background-color: #4a90e2;
        color: white;
      }
      .pagination-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1200px;
        margin: 20px auto;
        padding: 20px;
        background: #fff;
        border-top: 1px solid #eee;
      }
      .rows-per-page {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #4a90e2;
      }
      .rows-per-page select {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #4a90e2;
        color: #4a90e2;
        background-color: white;
      }
    </style>
  </head>
  <body>
    <header>
      <div class="button-container">
        <button onclick="window.history.back();">
          <i class="material-icons">arrow_back</i>
        </button>

        <button onclick="location.reload();">
          <i class="material-icons">refresh</i>
        </button>
      </div>
      <h1>User Details</h1>
      <div class="search-container">
        <input
          type="text"
          id="searchInput"
          placeholder="Search by Name, Age or Email"
        />
        <button id="searchButton"><i class="material-icons">search</i></button>
      </div>
      <button onclick="window.location.href='/api/user/userForm';">Add</button>
    </header>

    <table>
      <thead>
        <tr>
          <th>NAME</th>
          <th>AGE</th>
          <th>MESSAGE</th>
          <th>GENDER</th>
          <th>EMAIL</th>
          <th>CONTACT</th>
          <th>STATUS</th>
          <th>ACTION</th>
        </tr>
      </thead>
      <tbody id="userTableBody">
        <!-- User data will be populated here -->
      </tbody>
    </table>

    <footer>
      <div class="pagination-controls">
        <div class="rows-per-page">
          <span>Rows per page:</span>
          <select>
            <option value="1">1</option>

            <option value="5">5</option>
            <option value="10" selected>10</option>
            <option value="15">15</option>
            <option value="20">20</option>
          </select>
        </div>
        <nav aria-label="Page navigation example">
          <ul class="pagination">
            <li class="page-item">
              <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
              </a>
            </li>
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
              <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    </footer>

    <script>
      let currentPage = 1;
      let limit = 10;
      let totalPages = 1;

      // Toast function for delete operation
      function showToast(message) {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        toast.style.display = "block";
        setTimeout(() => {
          toast.style.display = "none";
        }, 3000);
      }

      async function fetchUsers(page = currentPage, rows = limit, search = "") {
        try {
          fetch(
            `/api/user/getUserDetails?page=${page}&limit=${rows}&search=${search}`
          )
            .then((response) => response.json())
            .then((data) => {
              const userTableBody = document.getElementById("userTableBody");
              userTableBody.innerHTML = ""; // Clear existing data

              currentPage = data.currentPage;
              totalPages = data.totalPages;
              updatePaginationControls();

              data.users.forEach((user) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                  <td>${user.Name}</td>
                  <td>${user.Age}</td>
                  <td>${user.Message}</td>
                  <td>${user.gender}</td>
                  <td>${user.email}</td>
                  <td>${user.contact}</td>
                  <td>${user.Status}</td>
                  <td>
                    <button onclick="editUser('${user._id}')" style="border: 2px solid #4a90e2; background-color: transparent; color: #4a90e2;" onmouseover="this.style.backgroundColor='#4a90e2'; this.style.color='white';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#4a90e2';">
                      <i class="material-icons">edit</i>
                    </button>
                    <button onclick="deleteUser('${user._id}')" style="border: 2px solid #ff4444; background-color: transparent; color: #ff4444;" onmouseover="this.style.backgroundColor='#ff4444'; this.style.color='white';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='#ff4444';">
                      <i class="material-icons">delete</i>
                    </button>








                  </td>
                `;
                userTableBody.appendChild(row);
              });
            })
            .catch((error) => {
              console.error("Error fetching users:", error);
              const userTableBody = document.getElementById("userTableBody");
              userTableBody.innerHTML =
                '<tr><td colspan="8" style="text-align:center;color:red">Error loading data</td></tr>';
            });
        } catch (error) {
          console.error("Error:", error);
        }
      }

      function editUser(userId) {
        window.location.href = `/api/user/renderUpdateUserDetails/${userId}`;
      }

      async function deleteUser(userId) {
        const isConfirmed = confirm(
          "Are you sure you want to delete the record?"
        );
        if (!isConfirmed) return;

        try {
          const response = await fetch(
            `/api/user/deleteUserDetails/${userId}`,
            {
              method: "DELETE",
            }
          );

          if (response.ok) {
            showToast("Data deleted successfully!");
            await fetchUsers(); // Refresh the user list
          } else {
            console.error("Failed to delete user");
          }
        } catch (error) {
          F;
          console.error("Error deleting user:", error);
        }
      }

      // Search functionality
      const searchInput = document.getElementById("searchInput");
      const searchButton = document.getElementById("searchButton");

      async function searchUsers() {
        try {
          const searchTerm = searchInput.value.trim();
          currentPage = 1;
          await fetchUsers(currentPage, limit, searchTerm);
        } catch (error) {
          console.error("Error searching users:", error);
          const userTableBody = document.getElementById("userTableBody");
          userTableBody.innerHTML =
            '<tr><td colspan="8" style="text-align:center;color:red">Error loading data</td></tr>';
        }
      }

      searchInput.addEventListener("keyup", (e) => {
        if (e.key === "Enter") {
          searchUsers();
        }
      });

      // Clear search and show all records on refresh
      document
        .querySelector('button[onclick="location.reload();"]')
        .addEventListener("click", () => {
          searchInput.value = "";
          currentPage = 1;
          fetchUsers();
        });

      searchButton.addEventListener("click", searchUsers);

      document.addEventListener("click", (e) => {
        if (e.target !== searchInput) {
          searchInput.value = "";
        }
      });

      // Pagination controls
      function updatePaginationControls() {
        const pagination = document.querySelector(".pagination");
        pagination.innerHTML = `
          <li class="page-item ${currentPage === 1 ? "disabled" : ""}">
            <a class="page-link" href="#" onclick="changePage(${
              currentPage - 1
            })" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          ${Array.from(
            { length: totalPages },
            (_, i) => `
            <li class="page-item ${i + 1 === currentPage ? "active" : ""}">
              <a class="page-link" href="#" onclick="changePage(${i + 1})">${
              i + 1
            }</a>
            </li>
          `
          ).join("")}
          <li class="page-item ${currentPage === totalPages ? "disabled" : ""}">
            <a class="page-link" href="#" onclick="changePage(${
              currentPage + 1
            })" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        `;
      }

      // Rows per page selection
      const rowsPerPageSelect = document.querySelector(".rows-per-page select");
      rowsPerPageSelect.addEventListener("change", (e) => {
        limit = parseInt(e.target.value);
        currentPage = 1;
        fetchUsers(currentPage, limit, searchInput.value.trim());
      });

      // Page change handler
      function changePage(page) {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        fetchUsers(currentPage, limit, searchInput.value.trim());
      }

    // Check for refresh parameter and show toast
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has("updateSuccess")) {
        showToast("Data updated successfully!");
    }


      // Fetch users when the page loads
      window.onload = () => fetchUsers(currentPage, limit);
    </script>
    <div id="toast" class="toast"></div>
  </body>
</html>
